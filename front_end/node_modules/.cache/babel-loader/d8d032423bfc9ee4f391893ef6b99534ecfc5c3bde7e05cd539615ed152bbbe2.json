{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'AccountRegister',\n  data() {\n    return {\n      mail_account: '',\n      mail_check: '',\n      // 保存发送验证码的邮箱\n      code: '',\n      code_input: '',\n      password: '',\n      password2: '',\n      // email: '', // 判断点击注册时邮箱是否与获取验证码的邮箱不同\n      validPassword: true,\n      // 判断密码格式是否符合规范\n      isWaiting: false,\n      // 判断发送验证码按钮是否处于等待状态，false为没有处于等待状态，可点击\n      remainingTime: 30 // 发送验证码后的时间限制，30秒\n    };\n  },\n\n  methods: {\n    checkPassword() {\n      const regex = /^(?=.*[a-zA-Z])(?=.*\\d)(?!.*\\s).{10,12}$/;\n      this.validPassword = regex.test(this.password);\n    },\n    async sendCode() {\n      if (!this.isWaiting) {\n        // 没有处于等待状态\n        const res = await axios.post('http://119.39.26.104:5000/login_system/register_verification_code', {\n          mail_account: this.mail_account\n        });\n        this.mail_check = res.data.mail_account;\n        if (res.data.code === '401') {\n          alert(`用户邮箱已存在`);\n          return;\n        }\n        if (res.data.code === '400') {\n          alert(`验证码发送失败，请稍后重试`);\n          return;\n        }\n        this.code = res.data.verification_code;\n        console.log(res);\n\n        //启动计时器\n        this.isWaiting = true;\n        this.startTimer();\n      }\n    },\n    startTimer() {\n      const timer = setInterval(() => {\n        if (this.remainingTime > 0) {\n          this.remainingTime--;\n        } else {\n          this.isWaiting = false;\n          this.remainingTime = 30;\n          clearInterval(timer);\n        }\n      }, 1000);\n    },\n    async register() {\n      this.checkPassword();\n      if (this.mail_check !== this.mail_account) {\n        alert(`注册邮箱必须与获取验证码邮箱一致！`);\n        return;\n      } else if (this.mail_account.trim() === '') {\n        alert(`邮箱不能为空`);\n        return;\n      } else if (this.code_input.trim() === '') {\n        alert(`验证码不能为空`);\n        return;\n      } else if (this.password.trim() === '') {\n        alert(`密码不能为空`);\n        return;\n      } else if (this.password2.trim() === '') {\n        alert(`请再次输入确认密码`);\n        return;\n      } else if (this.code !== this.code_input) {\n        alert(`验证码有误`);\n        return;\n      } else if (this.validPassword === false) {\n        alert(`输入的密码不符合格式要求`);\n        return;\n      } else if (this.password !== this.password2) {\n        alert(`两次密码输入不一致`);\n        return;\n      }\n      const res = await axios.post('http://119.39.26.104:5000/login_system/register', {\n        mail_account: this.mail_account,\n        password: this.password\n      });\n      alert(`注册成功！`);\n      this.$router.push('/login_system');\n      console.log(res);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","mail_account","mail_check","code","code_input","password","password2","validPassword","isWaiting","remainingTime","methods","checkPassword","regex","test","sendCode","res","post","alert","verification_code","console","log","startTimer","timer","setInterval","clearInterval","register","trim","$router","push"],"sources":["src/views/register.vue"],"sourcesContent":["<template>\r\n  <div class=\"first\">\r\n    <div class=\"second\">\r\n      <img src=\"../assets/login_computer.png\" alt=\"\">\r\n      <h3 class=\"sysName\">欢迎使用<br>ChatAAA</h3>\r\n      <div class=\"text\">\r\n        <h3>欢迎注册</h3>\r\n        <input v-model=\"mail_account\" type=\"text\" class=\"inp inp1\" placeholder=\"请输入注册邮箱\">\r\n        <input v-model=\"code_input\" type=\"text\" class=\"inp inp2\" placeholder=\"请输入验证码\">\r\n        <button @click=\"sendCode()\"  :disabled=\"isWaiting\" class=\"sendCode\">{{ isWaiting ? `${remainingTime}s` : '发送验证码' }}</button>\r\n        <input v-model=\"password\" type=\"password\" class=\"inp inp3\" placeholder=\"请输入密码10-12位，必须包含字母和数字，不能有空格\">\r\n        <input v-model=\"password2\" type=\"password\" class=\"inp inp4\" placeholder=\"请再次输入密码\">\r\n        <br>\r\n        <button @click=\"register()\" class=\"register\">注册</button>\r\n        <br>\r\n        <div class=\"backToLog\" @click=\"$router.back()\">返回登录</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nexport default {\r\n  name: 'AccountRegister',\r\n  data () {\r\n    return {\r\n      mail_account:'',\r\n      mail_check: '', // 保存发送验证码的邮箱\r\n      code:'',\r\n      code_input:'',\r\n      password:'',\r\n      password2:'',\r\n      // email: '', // 判断点击注册时邮箱是否与获取验证码的邮箱不同\r\n      validPassword: true, // 判断密码格式是否符合规范\r\n      isWaiting: false, // 判断发送验证码按钮是否处于等待状态，false为没有处于等待状态，可点击\r\n      remainingTime: 30 // 发送验证码后的时间限制，30秒\r\n    }\r\n  },\r\n  methods: {\r\n    checkPassword() {\r\n      const regex = /^(?=.*[a-zA-Z])(?=.*\\d)(?!.*\\s).{10,12}$/;\r\n      this.validPassword = regex.test(this.password);\r\n    },\r\n    async sendCode () {\r\n      if (!this.isWaiting) { // 没有处于等待状态\r\n        const res = await axios.post('http://119.39.26.104:5000/login_system/register_verification_code', {\r\n          mail_account: this.mail_account\r\n        })\r\n        this.mail_check = res.data.mail_account\r\n        if(res.data.code === '401') {\r\n          alert(`用户邮箱已存在`)\r\n          return\r\n        }\r\n        if(res.data.code === '400') {\r\n          alert(`验证码发送失败，请稍后重试`)\r\n          return\r\n        }\r\n        this.code = res.data.verification_code\r\n        console.log(res)\r\n\r\n        //启动计时器\r\n        this.isWaiting = true\r\n        this.startTimer()\r\n      }\r\n      \r\n    },\r\n    startTimer () {\r\n      const timer = setInterval(() => {\r\n        if (this.remainingTime > 0) {\r\n          this.remainingTime--\r\n        } else {\r\n          this.isWaiting = false\r\n          this.remainingTime = 30\r\n          clearInterval(timer)\r\n        }\r\n      }, 1000);\r\n    },\r\n    async register () {\r\n      this.checkPassword()\r\n      if (this.mail_check !== this.mail_account) {\r\n        alert(`注册邮箱必须与获取验证码邮箱一致！`)\r\n        return\r\n      } else if (this.mail_account.trim() === '') {\r\n        alert(`邮箱不能为空`)\r\n        return\r\n      }\r\n      else if (this.code_input.trim() === '') {\r\n        alert(`验证码不能为空`)\r\n        return\r\n      }\r\n      else if (this.password.trim() === '') {\r\n        alert(`密码不能为空`)\r\n        return\r\n      }\r\n      else if (this.password2.trim() === '') {\r\n        alert(`请再次输入确认密码`)\r\n        return\r\n      }\r\n      else if (this.code !== this.code_input) {\r\n        alert(`验证码有误`)\r\n        return\r\n      }\r\n      else if (this.validPassword === false) {\r\n        alert(`输入的密码不符合格式要求`)\r\n        return\r\n      }\r\n      else if (this.password !== this.password2) {\r\n        alert(`两次密码输入不一致`)\r\n        return\r\n      }\r\n      const res = await axios.post('http://119.39.26.104:5000/login_system/register', {\r\n        mail_account: this.mail_account,\r\n        password: this.password\r\n      })\r\n      alert(`注册成功！`)\r\n      this.$router.push('/login_system')\r\n      console.log(res)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.first {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 985px;\r\n  background-image: url(../assets/login.jpg);\r\n  background-size: cover;\r\n}\r\n\r\n.first .second {\r\n  width: 1050px;\r\n  height: 500px;\r\n  position: relative;\r\n  display: flex;\r\n}\r\n\r\n.second img {\r\n  border-radius: 10px 0 0 10px;\r\n  width: 600px;\r\n  height: 500px;\r\n  opacity: 0.5;\r\n}\r\n\r\n.second .sysName {\r\n  position: absolute;\r\n  left: 40px;\r\n  top: 50px;\r\n  font-size: 40px;\r\n  color: #fff;\r\n}\r\n\r\n.second .text {\r\n  position: relative;\r\n  width: 450px;\r\n  height: 500px;\r\n  background-color: #fff;\r\n  border-radius: 0 10px 10px 0;\r\n}\r\n\r\n.text h3 {\r\n  text-align: center;\r\n  padding: 40px 40px 70px 40px;\r\n  color: #3A62D7;\r\n  font-size: 30px;\r\n}\r\n\r\n.second .text .inp {\r\n  display: inline-block;\r\n  position: absolute;\r\n  width: 340px;\r\n  height: 30px;\r\n  margin: 50px;\r\n  padding: 5px;\r\n  border: none;\r\n  border-bottom: 1px solid #DCDCDC;\r\n}\r\n\r\n.inp:focus {\r\n  outline: none;\r\n}\r\n\r\n.inp1 {\r\n  position: absolute;\r\n  left: 20px;\r\n  top: 100px;\r\n}\r\n\r\n.inp2 {\r\n  position: absolute;\r\n  left: 20px;\r\n  top: 145px;\r\n}\r\n\r\n.inp3 {\r\n  position: absolute;\r\n  left: 20px;\r\n  top: 190px;\r\n}\r\n\r\n.inp4 {\r\n  position: absolute;\r\n  left: 20px;\r\n  top: 235px;\r\n}\r\n\r\n.sendCode {\r\n  position: absolute;\r\n  width: 90px;\r\n  height: 35px;\r\n  background-color: #1990FF;\r\n  color: #fff;\r\n  font-size: 12px;\r\n  border-radius: 30px;\r\n  text-align: center;\r\n  line-height: 35px;\r\n  top: 190px;\r\n  right: 40px;\r\n  cursor: pointer;\r\n}\r\n\r\n.sendCode:hover {\r\n  width: 93px;\r\n  height: 37px;\r\n  text-align: center;\r\n  line-height: 37px;\r\n  opacity: 0.7;\r\n  transition: 0.2s;\r\n}\r\n\r\n.text .forget {\r\n  position: absolute;\r\n  right: 80px;\r\n  top: 300px;\r\n  font-size: 12px;\r\n  color: #3A62D7;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n}\r\n\r\n.text .register {\r\n  position: absolute;\r\n  display: block;\r\n  width: 340px;\r\n  height: 45px;\r\n  background-color: #3A62D7;\r\n  text-align: center;\r\n  line-height: 45px;\r\n  color: #fff;\r\n  font-size: 16px;\r\n  margin: 0 auto;\r\n  top: 350px;\r\n  left: 55px;\r\n  cursor: pointer;\r\n}\r\n\r\n.text .register:hover {\r\n  border-radius: 10px;\r\n  width: 345px;\r\n  height: 50px;\r\n  text-align: center;\r\n  line-height: 50px;\r\n  opacity: 0.7;\r\n  transition: 0.2s;\r\n}\r\n\r\n.text .backToLog {\r\n  position: absolute;\r\n  display: block;\r\n  width: 340px;\r\n  height: 45px;\r\n  background-color: #3A62D7;\r\n  text-align: center;\r\n  line-height: 45px;\r\n  color: #fff;\r\n  font-size: 16px;\r\n  margin: 0 auto;\r\n  top: 420px;\r\n  left: 55px;\r\n  cursor: pointer;\r\n}\r\n\r\n.text .backToLog:hover {\r\n  border-radius: 10px;\r\n  width: 345px;\r\n  height: 50px;\r\n  text-align: center;\r\n  line-height: 50px;\r\n  opacity: 0.7;\r\n  transition: 0.2s;\r\n}\r\n</style>"],"mappings":";AAsBA,OAAAA,KAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,UAAA;MAAA;MACAC,IAAA;MACAC,UAAA;MACAC,QAAA;MACAC,SAAA;MACA;MACAC,aAAA;MAAA;MACAC,SAAA;MAAA;MACAC,aAAA;IACA;EACA;;EACAC,OAAA;IACAC,cAAA;MACA,MAAAC,KAAA;MACA,KAAAL,aAAA,GAAAK,KAAA,CAAAC,IAAA,MAAAR,QAAA;IACA;IACA,MAAAS,SAAA;MACA,UAAAN,SAAA;QAAA;QACA,MAAAO,GAAA,SAAAjB,KAAA,CAAAkB,IAAA;UACAf,YAAA,OAAAA;QACA;QACA,KAAAC,UAAA,GAAAa,GAAA,CAAAf,IAAA,CAAAC,YAAA;QACA,IAAAc,GAAA,CAAAf,IAAA,CAAAG,IAAA;UACAc,KAAA;UACA;QACA;QACA,IAAAF,GAAA,CAAAf,IAAA,CAAAG,IAAA;UACAc,KAAA;UACA;QACA;QACA,KAAAd,IAAA,GAAAY,GAAA,CAAAf,IAAA,CAAAkB,iBAAA;QACAC,OAAA,CAAAC,GAAA,CAAAL,GAAA;;QAEA;QACA,KAAAP,SAAA;QACA,KAAAa,UAAA;MACA;IAEA;IACAA,WAAA;MACA,MAAAC,KAAA,GAAAC,WAAA;QACA,SAAAd,aAAA;UACA,KAAAA,aAAA;QACA;UACA,KAAAD,SAAA;UACA,KAAAC,aAAA;UACAe,aAAA,CAAAF,KAAA;QACA;MACA;IACA;IACA,MAAAG,SAAA;MACA,KAAAd,aAAA;MACA,SAAAT,UAAA,UAAAD,YAAA;QACAgB,KAAA;QACA;MACA,gBAAAhB,YAAA,CAAAyB,IAAA;QACAT,KAAA;QACA;MACA,OACA,SAAAb,UAAA,CAAAsB,IAAA;QACAT,KAAA;QACA;MACA,OACA,SAAAZ,QAAA,CAAAqB,IAAA;QACAT,KAAA;QACA;MACA,OACA,SAAAX,SAAA,CAAAoB,IAAA;QACAT,KAAA;QACA;MACA,OACA,SAAAd,IAAA,UAAAC,UAAA;QACAa,KAAA;QACA;MACA,OACA,SAAAV,aAAA;QACAU,KAAA;QACA;MACA,OACA,SAAAZ,QAAA,UAAAC,SAAA;QACAW,KAAA;QACA;MACA;MACA,MAAAF,GAAA,SAAAjB,KAAA,CAAAkB,IAAA;QACAf,YAAA,OAAAA,YAAA;QACAI,QAAA,OAAAA;MACA;MACAY,KAAA;MACA,KAAAU,OAAA,CAAAC,IAAA;MACAT,OAAA,CAAAC,GAAA,CAAAL,GAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}