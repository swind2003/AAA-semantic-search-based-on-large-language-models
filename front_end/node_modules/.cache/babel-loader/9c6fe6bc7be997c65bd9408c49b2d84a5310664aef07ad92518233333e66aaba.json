{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      selectedYear: '',\n      // 选择年份\n      selectedMonth: '',\n      // 选择月份\n      selectedDay: '',\n      // 选择天数\n      availableYears: [],\n      // 存储可选的年份\n      availableMonths: [],\n      // 存储可选的月份\n      availableDays: [] // 存储可选的天数\n    };\n  },\n\n  mounted() {\n    this.updateYears(); // 初始化年份\n    this.updateMonths(); // 初始化月份\n    this.updateDays(); // 初始化天数\n  },\n\n  methods: {\n    updateYears() {\n      const currentYear = new Date().getFullYear();\n      // 如果当前年份不在availableYears中，则添加\n      for (let Year = 2023; Year <= currentYear; Year++) {\n        this.availableYears.push(Year);\n      }\n    },\n    updateMonths() {\n      const months = Array.from({\n        length: 12\n      }, (_, index) => index + 1);\n      this.availableMonths = months;\n      this.selectedMonth = ''; // 重置月份\n      this.updateDays(); // 更新天数\n    },\n\n    updateDays() {\n      const selectedYear = parseInt(this.selectedYear);\n      const selectedMonth = parseInt(this.selectedMonth);\n      const daysInMonth = new Date(selectedYear, selectedMonth, 0).getDate();\n      const days = Array.from({\n        length: daysInMonth\n      }, (_, index) => index + 1);\n      this.availableDays = days;\n\n      // 如果当前选择的天数超过新的天数范围，则重置为最大天数\n      if (parseInt(this.selectedDay) > daysInMonth) {\n        this.selectedDay = '';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","selectedYear","selectedMonth","selectedDay","availableYears","availableMonths","availableDays","mounted","updateYears","updateMonths","updateDays","methods","currentYear","Date","getFullYear","Year","push","months","Array","from","length","_","index","parseInt","daysInMonth","getDate","days"],"sources":["src/views/LoginYes1.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label for=\"year\">年份:</label>\r\n    <select id=\"year\" v-model=\"selectedYear\" @change=\"updateMonths\">\r\n      <option v-for=\"year in availableYears\" :key=\"year\">{{ year }}</option>\r\n    </select>\r\n\r\n    <label for=\"month\">月份:</label>\r\n    <select id=\"month\" v-model=\"selectedMonth\" @change=\"updateDays\">\r\n      <option v-for=\"month in availableMonths\" :key=\"month\">{{ month }}</option>\r\n    </select>\r\n\r\n    <label for=\"day\">天数:</label>\r\n    <select id=\"day\" v-model=\"selectedDay\">\r\n      <option v-for=\"day in availableDays\" :key=\"day\">{{ day }}</option>\r\n    </select>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n  return {\r\n    selectedYear: '', // 选择年份\r\n    selectedMonth: '', // 选择月份\r\n    selectedDay: '', // 选择天数\r\n    availableYears: [],   // 存储可选的年份\r\n    availableMonths: [],  // 存储可选的月份\r\n    availableDays: []   // 存储可选的天数\r\n  };\r\n  },\r\n  mounted() {\r\n  this.updateYears(); // 初始化年份\r\n  this.updateMonths(); // 初始化月份\r\n  this.updateDays(); // 初始化天数\r\n  },\r\n  methods: {\r\n  updateYears() {\r\n    const currentYear = new Date().getFullYear();\r\n    // 如果当前年份不在availableYears中，则添加\r\n    for (let Year = 2023; Year <= currentYear; Year++) {\r\n      this.availableYears.push(Year)\r\n    }\r\n  },\r\n  updateMonths() {\r\n    const months = Array.from({ length: 12 }, (_, index) => index + 1);\r\n    this.availableMonths = months;\r\n    this.selectedMonth = ''; // 重置月份\r\n    this.updateDays(); // 更新天数\r\n  },\r\n  updateDays() {\r\n    const selectedYear = parseInt(this.selectedYear);\r\n    const selectedMonth = parseInt(this.selectedMonth);\r\n    const daysInMonth = new Date(selectedYear, selectedMonth, 0).getDate();\r\n    const days = Array.from({ length: daysInMonth }, (_, index) => index + 1);\r\n    this.availableDays = days;\r\n\r\n    // 如果当前选择的天数超过新的天数范围，则重置为最大天数\r\n    if (parseInt(this.selectedDay) > daysInMonth) {\r\n    this.selectedDay = '';\r\n    }\r\n  }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n  .container {\r\n    overflow: auto;\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: pink;\r\n  }\r\n</style>"],"mappings":";AAoBA;EACAA,KAAA;IACA;MACAC,YAAA;MAAA;MACAC,aAAA;MAAA;MACAC,WAAA;MAAA;MACAC,cAAA;MAAA;MACAC,eAAA;MAAA;MACAC,aAAA;IACA;EACA;;EACAC,QAAA;IACA,KAAAC,WAAA;IACA,KAAAC,YAAA;IACA,KAAAC,UAAA;EACA;;EACAC,OAAA;IACAH,YAAA;MACA,MAAAI,WAAA,OAAAC,IAAA,GAAAC,WAAA;MACA;MACA,SAAAC,IAAA,SAAAA,IAAA,IAAAH,WAAA,EAAAG,IAAA;QACA,KAAAX,cAAA,CAAAY,IAAA,CAAAD,IAAA;MACA;IACA;IACAN,aAAA;MACA,MAAAQ,MAAA,GAAAC,KAAA,CAAAC,IAAA;QAAAC,MAAA;MAAA,IAAAC,CAAA,EAAAC,KAAA,KAAAA,KAAA;MACA,KAAAjB,eAAA,GAAAY,MAAA;MACA,KAAAf,aAAA;MACA,KAAAQ,UAAA;IACA;;IACAA,WAAA;MACA,MAAAT,YAAA,GAAAsB,QAAA,MAAAtB,YAAA;MACA,MAAAC,aAAA,GAAAqB,QAAA,MAAArB,aAAA;MACA,MAAAsB,WAAA,OAAAX,IAAA,CAAAZ,YAAA,EAAAC,aAAA,KAAAuB,OAAA;MACA,MAAAC,IAAA,GAAAR,KAAA,CAAAC,IAAA;QAAAC,MAAA,EAAAI;MAAA,IAAAH,CAAA,EAAAC,KAAA,KAAAA,KAAA;MACA,KAAAhB,aAAA,GAAAoB,IAAA;;MAEA;MACA,IAAAH,QAAA,MAAApB,WAAA,IAAAqB,WAAA;QACA,KAAArB,WAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}